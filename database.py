import aiosqlite
from typing import List, Optional, Dict
from config import DATABASE_URL
import logging

logger = logging.getLogger(__name__)


async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏"""
    try:
        async with aiosqlite.connect(DATABASE_URL) as db:
            # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
            await db.execute('PRAGMA foreign_keys = ON')

            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await db.execute('''
                             CREATE TABLE IF NOT EXISTS users
                             (
                                 user_id    INTEGER PRIMARY KEY,
                                 username   TEXT,
                                 first_name TEXT,
                                 created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                             )
                             ''')

            # –¢–∞–±–ª–∏—Ü–∞ —Å–ø–∏—Å–∫–æ–≤ –ø–æ–∫—É–ø–æ–∫
            await db.execute('''
                             CREATE TABLE IF NOT EXISTS shopping_lists
                             (
                                 id         INTEGER PRIMARY KEY AUTOINCREMENT,
                                 user_id    INTEGER NOT NULL,
                                 name       TEXT      DEFAULT '–û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫',
                                 created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                 FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE
                             )
                             ''')

            # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            await db.execute('''
                             CREATE TABLE IF NOT EXISTS products
                             (
                                 id        INTEGER PRIMARY KEY AUTOINCREMENT,
                                 list_id   INTEGER NOT NULL,
                                 name      TEXT    NOT NULL,
                                 quantity  TEXT      DEFAULT '1',
                                 is_bought INTEGER   DEFAULT 0,
                                 added_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                                 FOREIGN KEY (list_id) REFERENCES shopping_lists (id) ON DELETE CASCADE
                             )
                             ''')

            await db.commit()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise


class Database:
    @staticmethod
    async def add_user(user_id: int, username: str = None, first_name: str = None):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º—É"""
        try:
            async with aiosqlite.connect(DATABASE_URL) as db:
                cursor = await db.execute(
                    'SELECT user_id FROM users WHERE user_id = ?',
                    (user_id,)
                )
                existing_user = await cursor.fetchone()

                if not existing_user:
                    await db.execute(
                        'INSERT INTO users (user_id, username, first_name) VALUES (?, ?, ?)',
                        (user_id, username or '', first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                    )
                    await db.commit()
                    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    @staticmethod
    async def get_or_create_list(user_id: int, list_name: str = '–û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫') -> Optional[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫"""
        try:
            async with aiosqlite.connect(DATABASE_URL) as db:
                cursor = await db.execute(
                    'SELECT id FROM shopping_lists WHERE user_id = ? AND name = ?',
                    (user_id, list_name)
                )
                result = await cursor.fetchone()

                if result:
                    return result[0]

                cursor = await db.execute(
                    'INSERT INTO shopping_lists (user_id, name) VALUES (?, ?)',
                    (user_id, list_name)
                )
                await db.commit()
                list_id = cursor.lastrowid
                logger.info(f"üìù –°–æ–∑–¥–∞–Ω —Å–ø–∏—Å–æ–∫ '{list_name}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return list_id

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∏—Å–∫–æ–º: {e}")
            return None

    @staticmethod
    async def add_product(list_id: int, name: str, quantity: str = '1'):
        """–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –≤ —Å–ø–∏—Å–æ–∫"""
        try:
            async with aiosqlite.connect(DATABASE_URL) as db:
                await db.execute(
                    'INSERT INTO products (list_id, name, quantity, is_bought) VALUES (?, ?, ?, 0)',
                    (list_id, name.strip(), quantity.strip())
                )
                await db.commit()
                logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ–¥—É–∫—Ç: {name} ({quantity})")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")

    @staticmethod
    async def add_multiple_products(list_id: int, products: List[Dict[str, str]]):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
        try:
            async with aiosqlite.connect(DATABASE_URL) as db:
                for product in products:
                    await db.execute(
                        'INSERT INTO products (list_id, name, quantity, is_bought) VALUES (?, ?, ?, 0)',
                        (list_id, product['name'].strip(), product['quantity'].strip())
                    )
                await db.commit()
                logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ AI")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")

    @staticmethod
    async def get_products(list_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞"""
        try:
            async with aiosqlite.connect(DATABASE_URL) as db:
                cursor = await db.execute(
                    'SELECT id, name, quantity, is_bought FROM products WHERE list_id = ? ORDER BY is_bought ASC, added_at DESC',
                    (list_id,)
                )
                products = await cursor.fetchall()

                return [
                    {
                        'id': p[0],
                        'name': p[1],
                        'quantity': p[2],
                        'is_bought': bool(p[3])
                    }
                    for p in products
                ]

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
            return []

    @staticmethod
    async def toggle_product_bought(product_id: int) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        try:
            async with aiosqlite.connect(DATABASE_URL) as db:
                cursor = await db.execute(
                    'SELECT is_bought FROM products WHERE id = ?',
                    (product_id,)
                )
                result = await cursor.fetchone()

                if result:
                    new_status = 1 if result[0] == 0 else 0
                    await db.execute(
                        'UPDATE products SET is_bought = ? WHERE id = ?',
                        (new_status, product_id)
                    )
                    await db.commit()
                    logger.info(f"üîÑ –ò–∑–º–µ–Ω–µ–Ω —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞ {product_id} –Ω–∞ {bool(new_status)}")
                    return True

                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False

    @staticmethod
    async def delete_product(product_id: int) -> bool:
        """–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞"""
        try:
            async with aiosqlite.connect(DATABASE_URL) as db:
                cursor = await db.execute(
                    'DELETE FROM products WHERE id = ?',
                    (product_id,)
                )
                await db.commit()

                if cursor.rowcount > 0:
                    logger.info(f"üóë –£–¥–∞–ª–µ–Ω –ø—Ä–æ–¥—É–∫—Ç {product_id}")
                    return True
                return False

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
            return False

    @staticmethod
    async def clear_bought_products(list_id: int) -> int:
        """–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"""
        try:
            async with aiosqlite.connect(DATABASE_URL) as db:
                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                cursor = await db.execute(
                    'SELECT COUNT(*) FROM products WHERE list_id = ? AND is_bought = 1',
                    (list_id,)
                )
                count_result = await cursor.fetchone()
                bought_count = count_result[0] if count_result else 0

                if bought_count == 0:
                    logger.info(f"‚ÑπÔ∏è –ù–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ {list_id}")
                    return 0

                # –£–¥–∞–ª—è–µ–º –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                cursor = await db.execute(
                    'DELETE FROM products WHERE list_id = ? AND is_bought = 1',
                    (list_id,)
                )
                await db.commit()

                deleted_count = cursor.rowcount
                logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ {list_id}")
                return deleted_count

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {e}")
            return 0

    @staticmethod
    async def clear_all_products(list_id: int) -> int:
        """–ù–û–í–û–ï: –£–¥–∞–ª–∏—Ç—å –í–°–ï –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Å–ø–∏—Å–∫–∞"""
        try:
            async with aiosqlite.connect(DATABASE_URL) as db:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
                cursor = await db.execute(
                    'SELECT COUNT(*) FROM products WHERE list_id = ?',
                    (list_id,)
                )
                count_result = await cursor.fetchone()
                total_count = count_result[0] if count_result else 0

                if total_count == 0:
                    logger.info(f"‚ÑπÔ∏è –°–ø–∏—Å–æ–∫ {list_id} —É–∂–µ –ø—É—Å—Ç")
                    return 0

                # –£–¥–∞–ª—è–µ–º –í–°–ï —Ç–æ–≤–∞—Ä—ã
                cursor = await db.execute(
                    'DELETE FROM products WHERE list_id = ?',
                    (list_id,)
                )
                await db.commit()

                deleted_count = cursor.rowcount
                logger.info(f"üóë –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ç–æ–≤–∞—Ä–æ–≤ (–≤–µ—Å—å —Å–ø–∏—Å–æ–∫ {list_id})")
                return deleted_count

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ–≥–æ —Å–ø–∏—Å–∫–∞: {e}")
            return 0

    @staticmethod
    async def get_user_stats(user_id: int) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            async with aiosqlite.connect(DATABASE_URL) as db:
                cursor = await db.execute('''
                                          SELECT COUNT(*)                                       as total_products,
                                                 SUM(CASE WHEN is_bought = 1 THEN 1 ELSE 0 END) as bought_products
                                          FROM products p
                                                   JOIN shopping_lists sl ON p.list_id = sl.id
                                          WHERE sl.user_id = ?
                                          ''', (user_id,))

                stats = await cursor.fetchone()

                return {
                    'total_products': stats[0] or 0,
                    'bought_products': stats[1] or 0,
                    'remaining_products': (stats[0] or 0) - (stats[1] or 0)
                }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'total_products': 0, 'bought_products': 0, 'remaining_products': 0}

    @staticmethod
    async def mark_all_products(list_id: int, mark_as_bought: bool) -> int:
        """–ù–û–í–û–ï: –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã–µ –∏–ª–∏ –Ω–µ –∫—É–ø–ª–µ–Ω–Ω—ã–µ"""
        try:
            async with aiosqlite.connect(DATABASE_URL) as db:
                status = 1 if mark_as_bought else 0

                cursor = await db.execute(
                    'UPDATE products SET is_bought = ? WHERE list_id = ?',
                    (status, list_id)
                )
                await db.commit()

                affected_count = cursor.rowcount
                action = "–æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –∫—É–ø–ª–µ–Ω–Ω—ã–µ" if mark_as_bought else "—Å–Ω—è—Ç—ã –æ—Ç–º–µ—Ç–∫–∏"
                logger.info(f"üìã {action} —É {affected_count} —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–ø–∏—Å–∫–µ {list_id}")
                return affected_count

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–º–µ—Ç–∫–∏: {e}")
            return 0
