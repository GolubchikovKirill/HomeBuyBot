import aiohttp
import asyncio
import ssl
import certifi
from typing import List, Optional
from config import PERPLEXITY_API_KEY, PERPLEXITY_API_URL
import logging

logger = logging.getLogger(__name__)


class PerplexityClient:
    def __init__(self):
        self.api_key = PERPLEXITY_API_KEY
        self.api_url = PERPLEXITY_API_URL
        self.session = None

    async def get_session(self):
        """–ü–æ–ª—É—á–∏—Ç—å aiohttp —Å–µ—Å—Å–∏—é"""
        if self.session is None or self.session.closed:
            ssl_context = ssl.create_default_context(cafile=certifi.where())
            connector = aiohttp.TCPConnector(ssl=ssl_context)
            timeout = aiohttp.ClientTimeout(total=30)

            self.session = aiohttp.ClientSession(
                connector=connector,
                timeout=timeout
            )
        return self.session

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é"""
        if self.session and not self.session.closed:
            await self.session.close()

    async def get_shopping_suggestions(self, user_message: str, current_list: List[str] = None) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–ø–∏—Å–∫—É –ø–æ–∫—É–ø–æ–∫ –æ—Ç AI"""

        if not self.api_key:
            return "ü§ñ AI –ø–æ–º–æ—â–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ PERPLEXITY_API_KEY –≤ .env —Ñ–∞–π–ª–µ."

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if current_list and len(current_list) > 0:
            list_text = "–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫: " + ", ".join(current_list[:5])
        else:
            list_text = "–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç"

        # –ù–û–í–´–ï –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ Perplexity 2025 (—Å Pro –ø–æ–¥–ø–∏—Å–∫–æ–π)
        models_to_try = [
            "sonar-pro",  # –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            "sonar",  # –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            "sonar-reasoning",  # –ú–æ–¥–µ–ª—å —Å —Ü–µ–ø–æ—á–∫–æ–π —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
            "sonar-deep-research",  # –ì–ª—É–±–æ–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
            "r1-1776"  # –û—Ñ–ª–∞–π–Ω –º–æ–¥–µ–ª—å (–±–µ–∑ –ø–æ–∏—Å–∫–∞)
        ]

        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }

        session = await self.get_session()

        for model in models_to_try:
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π Sonar
                payload = {
                    "model": model,
                    "messages": [
                        {
                            "role": "system",
                            "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ–ª–µ–∑–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏."
                        },
                        {
                            "role": "user",
                            "content": f"{list_text}. –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}"
                        }
                    ],
                    "max_tokens": 200,
                    "temperature": 0.3,
                    "stream": False
                }

                # –î–ª—è –º–æ–¥–µ–ª–µ–π —Å –ø–æ–∏—Å–∫–æ–º –¥–æ–±–∞–≤–ª—è–µ–º web_search_options
                if model in ["sonar", "sonar-pro", "sonar-reasoning", "sonar-deep-research"]:
                    payload["web_search_options"] = {
                        "search_context_size": "medium",
                        "top_k": 3,
                        "return_related_questions": False,
                        "search_recency_filter": "month"  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
                    }

                logger.info(f"üîó –ü—Ä–æ–±—É–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å 2025: {model}")

                async with session.post(
                        self.api_url,
                        json=payload,
                        headers=headers
                ) as response:

                    logger.info(f"üì° Perplexity –æ—Ç–≤–µ—Ç –¥–ª—è {model}: —Å—Ç–∞—Ç—É—Å {response.status}")

                    if response.status == 200:
                        result = await response.json()
                        ai_response = result['choices'][0]['message']['content']
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏ 2025: {model}")
                        return f"ü§ñ {ai_response}"

                    elif response.status == 401:
                        logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á Perplexity")
                        return "ü§ñ –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á –Ω–∞ https://www.perplexity.ai/settings/api"

                    elif response.status == 429:
                        logger.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
                        return "ü§ñ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."

                    elif response.status == 400:
                        response_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ 400 —Å –º–æ–¥–µ–ª—å—é {model}: {response_text[:200]}")
                        continue

                    elif response.status == 403:
                        logger.error(f"‚ùå –ú–æ–¥–µ–ª—å {model} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –ø–ª–∞–Ω–∞")
                        continue

                    else:
                        response_text = await response.text()
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ {response.status} —Å –º–æ–¥–µ–ª—å—é {model}: {response_text[:200]}")
                        continue

            except asyncio.TimeoutError:
                logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ {model}")
                continue

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å –º–æ–¥–µ–ª—å—é {model}: {type(e).__name__}: {e}")
                continue

        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        logger.error("‚ùå –í—Å–µ –Ω–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ Perplexity 2025 –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return """ü§ñ AI –ø–æ–º–æ—â–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.

**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**
‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º Perplexity
‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç Pro –ø–æ–¥–ø–∏—Å–∫–∏
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã Perplexity

**–†–µ—à–µ–Ω–∏–µ:**
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–ª—é—á –Ω–∞ https://www.perplexity.ai/settings/api
2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Pro –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"""


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
perplexity_client = PerplexityClient()
