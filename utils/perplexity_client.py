import aiohttp
import asyncio
import ssl
import certifi
import re
from typing import List, Optional, Dict
from config import PERPLEXITY_API_KEY, PERPLEXITY_API_URL
import logging

logger = logging.getLogger(__name__)


class PerplexityClient:
    def __init__(self):
        self.api_key = PERPLEXITY_API_KEY
        self.api_url = "https://api.perplexity.ai/chat/completions"
        self.session = None

    async def get_session(self):
        """–ü–æ–ª—É—á–∏—Ç—å aiohttp —Å–µ—Å—Å–∏—é"""
        if self.session is None or self.session.closed:
            ssl_context = ssl.create_default_context(cafile=certifi.where())
            connector = aiohttp.TCPConnector(ssl=ssl_context)
            timeout = aiohttp.ClientTimeout(total=30)

            self.session = aiohttp.ClientSession(
                connector=connector,
                timeout=timeout
            )
        return self.session

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é"""
        if self.session and not self.session.closed:
            await self.session.close()

    def extract_products_from_response(self, ai_response: str) -> List[Dict[str, str]]:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
        products = []

        # –ò—â–µ–º —Å–ø–∏—Å–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
        patterns = [
            r'[\-\*\‚Ä¢]\s*([–ê-–Ø–∞-—è\s]+(?:\d+\s*(?:–∫–≥|–≥|–ª|–º–ª|—à—Ç|—à—Ç—É–∫|—É–ø–∞–∫|–ø–∞—á–∫–∞|–±–∞–Ω–∫–∞|–±—É—Ö–∞–Ω–∫–∞)?))',
            r'\d+\.\s*([–ê-–Ø–∞-—è\s]+(?:\d+\s*(?:–∫–≥|–≥|–ª|–º–ª|—à—Ç|—à—Ç—É–∫|—É–ø–∞–∫|–ø–∞—á–∫–∞|–±–∞–Ω–∫–∞|–±—É—Ö–∞–Ω–∫–∞)?))',
            r'([–ê-–Ø–∞-—è]+)\s*-\s*(\d+\s*(?:–∫–≥|–≥|–ª|–º–ª|—à—Ç|—à—Ç—É–∫|—É–ø–∞–∫|–ø–∞—á–∫–∞|–±–∞–Ω–∫–∞))',
        ]

        for pattern in patterns:
            matches = re.findall(pattern, ai_response, re.IGNORECASE)
            for match in matches:
                if isinstance(match, tuple):
                    name, quantity = match
                    products.append({"name": name.strip(), "quantity": quantity.strip()})
                else:
                    parts = match.strip().split()
                    if len(parts) > 1 and any(
                            unit in parts[-1].lower() for unit in ['–∫–≥', '–≥', '–ª', '–º–ª', '—à—Ç', '—É–ø–∞–∫']):
                        name = ' '.join(parts[:-1])
                        quantity = parts[-1]
                    else:
                        name = match.strip()
                        quantity = '1'

                    if name and len(name) > 2:
                        products.append({"name": name, "quantity": quantity})

        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_products = []
        seen = set()
        for product in products:
            key = product['name'].lower()
            if key not in seen and len(key) > 2:
                seen.add(key)
                unique_products.append(product)

        return unique_products[:5]

    async def get_smart_response(self, user_message: str, current_list: List[str] = None,
                                 context: str = "general") -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI —Å –∞–Ω–∞–ª–∏–∑–æ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–π"""

        if not self.api_key:
            return {
                "response": "ü§ñ AI –ø–æ–º–æ—â–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ PERPLEXITY_API_KEY –≤ .env —Ñ–∞–π–ª–µ.",
                "products": [],
                "intent": "error"
            }

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if current_list and len(current_list) > 0:
            list_context = f"–¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫: {', '.join(current_list[:8])}"
        else:
            list_context = "–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç"

        # –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        system_prompt = f"""–¢—ã - —É–º–Ω—ã–π —Å–µ–º–µ–π–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫. 

–ö–û–ù–¢–ï–ö–°–¢: {list_context}

–¢–í–û–ò –ó–ê–î–ê–ß–ò:
1. –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö, —Ä–µ—Ü–µ–ø—Ç–∞—Ö, –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–∏ –µ–¥—ã
2. –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏
3. –ü–æ–º–æ–≥–∞—Ç—å —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–∏—Ç–∞–Ω–∏—è
4. –î–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ —Ö—Ä–∞–Ω–µ–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤
5. –ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –∏ –∑–∞–º–µ–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–û–í:
- –û—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ (300-500 —Å–ª–æ–≤)
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç: –∑–∞–≥–æ–ª–æ–≤–∫–∏, —Å–ø–∏—Å–∫–∏, —Å–æ–≤–µ—Ç—ã
- –ï—Å–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—à—å –ø—Ä–æ–¥—É–∫—Ç—ã, –≤—ã–¥–µ–ª—è–π –∏—Ö —Å–ø–∏—Å–∫–æ–º —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
- –î–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏

–Ø–ó–´–ö: –¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫

–°–¢–ò–õ–¨: –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π"""

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–±–æ—á–∏–µ –º–æ–¥–µ–ª–∏
        models_to_try = [
            "sonar-pro",  # –†–∞–±–æ—Ç–∞–ª–∞ —Ä–∞–Ω–µ–µ
            "sonar",  # –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å
            "sonar-reasoning",  # –ú–æ–¥–µ–ª—å —Å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è–º–∏
            "sonar-deep-research"  # –ì–ª—É–±–æ–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        ]

        headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json"
        }

        session = await self.get_session()

        for model in models_to_try:
            try:
                payload = {
                    "model": model,
                    "messages": [
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_message}
                    ],
                    "max_tokens": 800,
                    "temperature": 0.4,
                    "stream": False
                }

                # –î–æ–±–∞–≤–ª—è–µ–º web_search_options –¥–ª—è online –º–æ–¥–µ–ª–µ–π
                if model in ["sonar", "sonar-pro", "sonar-reasoning", "sonar-deep-research"]:
                    payload["web_search_options"] = {
                        "search_context_size": "medium",
                        "top_k": 3,
                        "return_related_questions": False,
                        "search_recency_filter": "month"
                    }

                logger.info(f"üîó –ó–∞–ø—Ä–æ—Å –∫ —É–º–Ω–æ–º—É AI: {model}")

                async with session.post(
                        self.api_url,
                        json=payload,
                        headers=headers
                ) as response:

                    if response.status == 200:
                        result = await response.json()
                        ai_response = result['choices'][0]['message']['content']

                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
                        products = self.extract_products_from_response(ai_response)

                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        intent = self.detect_intent(user_message, ai_response)

                        logger.info(f"‚úÖ –£–º–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {model}, –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(products)}")

                        return {
                            "response": ai_response,
                            "products": products,
                            "intent": intent,
                            "model": model
                        }
                    else:
                        response_text = await response.text()
                        logger.warning(f"‚ùå –û—à–∏–±–∫–∞ {response.status} —Å –º–æ–¥–µ–ª—å—é {model}: {response_text[:100]}")
                        continue

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å –º–æ–¥–µ–ª—å—é {model}: {e}")
                continue

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã
        return await self.get_simple_ai_response(user_message, current_list)

    async def get_simple_ai_response(self, user_message: str, current_list: List[str] = None) -> Dict:
        """–ü—Ä–æ—Å—Ç–æ–π AI –±–µ–∑ API - fallback —Ä–µ—à–µ–Ω–∏–µ"""

        simple_responses = {
            "–ø—Ä–∏–≤–µ—Ç": "ü§ñ **–ü—Ä–∏–≤–µ—Ç!** –Ø –≤–∞—à —Å–µ–º–µ–π–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö, —Ä–µ—Ü–µ–ø—Ç–∞—Ö –∏–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∏—Ç–∞–Ω–∏—è!",
            "123": "ü§ñ **–ü–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ –µ–¥–µ, —Ä–µ—Ü–µ–ø—Ç–∞—Ö –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä: '–ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –±–æ—Ä—â–∞?' –∏–ª–∏ '–ü—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–∞'",
            "–±–æ—Ä—â": "üç≤ **–î–ª—è –±–æ—Ä—â–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è:**\n\n‚Ä¢ –°–≤–µ–∫–ª–∞ - 2-3 —à—Ç—É–∫–∏\n‚Ä¢ –ö–∞–ø—É—Å—Ç–∞ - 200–≥\n‚Ä¢ –ú–æ—Ä–∫–æ–≤—å - 1 —à—Ç—É–∫–∞\n‚Ä¢ –õ—É–∫ - 1 —à—Ç—É–∫–∞\n‚Ä¢ –ö–∞—Ä—Ç–æ—Ñ–µ–ª—å - 3-4 —à—Ç—É–∫–∏\n‚Ä¢ –ú—è—Å–æ –≥–æ–≤—è–¥–∏–Ω–∞ - 500–≥\n‚Ä¢ –¢–æ–º–∞—Ç–Ω–∞—è –ø–∞—Å—Ç–∞ - 2 —Å—Ç.–ª.\n‚Ä¢ –ó–µ–ª–µ–Ω—å (—É–∫—Ä–æ–ø, –ø–µ—Ç—Ä—É—à–∫–∞)\n‚Ä¢ –°–º–µ—Ç–∞–Ω–∞ –¥–ª—è –ø–æ–¥–∞—á–∏\n\n**–°–æ–≤–µ—Ç:** –°–≤–µ–∫–ª—É –ª—É—á—à–µ –æ—Ç–≤–∞—Ä–∏—Ç—å –∑–∞—Ä–∞–Ω–µ–µ!",
            "–∑–∞–≤—Ç—Ä–∞–∫": "ü•ê **–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –∑–∞–≤—Ç—Ä–∞–∫–∞:**\n\n‚Ä¢ –Ø–π—Ü–∞ - 6 —à—Ç—É–∫\n‚Ä¢ –•–ª–µ–± - 1 –±—É—Ö–∞–Ω–∫–∞\n‚Ä¢ –ú–æ–ª–æ–∫–æ - 1 –ª–∏—Ç—Ä\n‚Ä¢ –ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ - 200–≥\n‚Ä¢ –°—ã—Ä - 300–≥\n‚Ä¢ –ö–æ–ª–±–∞—Å–∞ - 200–≥\n‚Ä¢ –ö–æ—Ñ–µ\n‚Ä¢ –ß–∞–π\n‚Ä¢ –û–≤—Å—è–Ω–∫–∞ - 500–≥\n‚Ä¢ –§—Ä—É–∫—Ç—ã (–±–∞–Ω–∞–Ω—ã, —è–±–ª–æ–∫–∏)",
            "—É–∂–∏–Ω": "üçΩ **–î–ª—è —É–∂–∏–Ω–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:**\n\n‚Ä¢ –ú—è—Å–æ –∏–ª–∏ —Ä—ã–±–∞ - 600–≥\n‚Ä¢ –ì–∞—Ä–Ω–∏—Ä: —Ä–∏—Å/–º–∞–∫–∞—Ä–æ–Ω—ã/–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å\n‚Ä¢ –°–≤–µ–∂–∏–µ –æ–≤–æ—â–∏ –¥–ª—è —Å–∞–ª–∞—Ç–∞\n‚Ä¢ –ó–µ–ª–µ–Ω—å\n‚Ä¢ –°–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã\n\n**–ò–¥–µ–∏:** –ö—É—Ä–∏—Ü–∞ —Å —Ä–∏—Å–æ–º, —Ä—ã–±–∞ —Å –æ–≤–æ—â–∞–º–∏, –≥–æ–≤—è–¥–∏–Ω–∞ —Å –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º",
            "—Å–∞–ª–∞—Ç": "ü•ó **–î–ª—è —Å–≤–µ–∂–µ–≥–æ —Å–∞–ª–∞—Ç–∞:**\n\n‚Ä¢ –û–≥—É—Ä—Ü—ã - 3 —à—Ç—É–∫–∏\n‚Ä¢ –ü–æ–º–∏–¥–æ—Ä—ã - 4 —à—Ç—É–∫–∏\n‚Ä¢ –õ–∏—Å—Ç—å—è —Å–∞–ª–∞—Ç–∞\n‚Ä¢ –õ—É–∫ –∫—Ä–∞—Å–Ω—ã–π - 1 —à—Ç—É–∫–∞\n‚Ä¢ –ú–æ—Ä–∫–æ–≤—å - 1 —à—Ç—É–∫–∞\n‚Ä¢ –†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –º–∞—Å–ª–æ\n‚Ä¢ –°–æ–ª—å, –ø–µ—Ä–µ—Ü\n‚Ä¢ –õ–∏–º–æ–Ω –¥–ª—è –∑–∞–ø—Ä–∞–≤–∫–∏",
            "–≤—ã–ø–µ—á–∫–∞": "üßÅ **–î–ª—è –≤—ã–ø–µ—á–∫–∏ –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä:**\n\n‚Ä¢ –ú—É–∫–∞ - 1–∫–≥\n‚Ä¢ –Ø–π—Ü–∞ - 10 —à—Ç—É–∫\n‚Ä¢ –°–∞—Ö–∞—Ä - 500–≥\n‚Ä¢ –ú–∞—Å–ª–æ —Å–ª–∏–≤–æ—á–Ω–æ–µ - 500–≥\n‚Ä¢ –ú–æ–ª–æ–∫–æ - 1 –ª–∏—Ç—Ä\n‚Ä¢ –†–∞–∑—Ä—ã—Ö–ª–∏—Ç–µ–ª—å\n‚Ä¢ –í–∞–Ω–∏–ª–∏–Ω\n‚Ä¢ –°–æ–ª—å\n\n**–°–æ–≤–µ—Ç:** –í—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–º–Ω–∞—Ç–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã!",
            "–∑–¥–æ—Ä–æ–≤–æ–µ": "ü•ó **–ó–¥–æ—Ä–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:**\n\n‚Ä¢ –û–≤–æ—â–∏: –±—Ä–æ–∫–∫–æ–ª–∏, —à–ø–∏–Ω–∞—Ç, –º–æ—Ä–∫–æ–≤—å\n‚Ä¢ –§—Ä—É–∫—Ç—ã: —è–±–ª–æ–∫–∏, –±–∞–Ω–∞–Ω—ã, —è–≥–æ–¥—ã\n‚Ä¢ –†—ã–±–∞: –ª–æ—Å–æ—Å—å, —Ç—Ä–µ—Å–∫–∞\n‚Ä¢ –û—Ä–µ—Ö–∏ –∏ —Å–µ–º–µ—á–∫–∏\n‚Ä¢ –ö—Ä—É–ø—ã: –æ–≤—Å—è–Ω–∫–∞, –≥—Ä–µ—á–∫–∞, –±—É—Ä—ã–π —Ä–∏—Å\n‚Ä¢ –ô–æ–≥—É—Ä—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π\n‚Ä¢ –ê–≤–æ–∫–∞–¥–æ\n‚Ä¢ –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ",
            "–±—ã—Å—Ç—Ä–æ": "‚ö° **–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:**\n\n‚Ä¢ –ú–∞–∫–∞—Ä–æ–Ω—ã - 500–≥\n‚Ä¢ –Ø–π—Ü–∞ - 10 —à—Ç—É–∫\n‚Ä¢ –•–ª–µ–± –¥–ª—è —Ç–æ—Å—Ç–æ–≤\n‚Ä¢ –°–æ—Å–∏—Å–∫–∏ - 500–≥\n‚Ä¢ –ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –æ–≤–æ—â–∏\n‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ —Å–æ—É—Å—ã\n‚Ä¢ –ö–æ–Ω—Å–µ—Ä–≤—ã (—Ç—É–Ω–µ—Ü, –∫—É–∫—É—Ä—É–∑–∞)\n‚Ä¢ –°—ã—Ä –ø–ª–∞–≤–ª–µ–Ω—ã–π\n\n**–ò–¥–µ–∏:** –Ø–∏—á–Ω–∏—Ü–∞, –º–∞–∫–∞—Ä–æ–Ω—ã —Å —Å–æ—Å–∏—Å–∫–∞–º–∏, —Ç–æ—Å—Ç—ã —Å —Å—ã—Ä–æ–º"
        }

        message_lower = user_message.lower()

        # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        for keyword, response in simple_responses.items():
            if keyword in message_lower:
                return {
                    "response": response,
                    "products": [],
                    "intent": "simple",
                    "model": "simple_ai"
                }

        # –û–±—â–∏–π –æ—Ç–≤–µ—Ç
        response = "ü§ñ **–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å:\n\n‚Ä¢ '–ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –±–æ—Ä—â–∞?'\n‚Ä¢ '–ü—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–∞'\n‚Ä¢ '–ó–¥–æ—Ä–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã'\n‚Ä¢ '–ë—ã—Å—Ç—Ä—ã–π —É–∂–∏–Ω'\n\n–ò–ª–∏ –∑–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –æ –µ–¥–µ –∏ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö!"

        return {
            "response": response,
            "products": [],
            "intent": "general",
            "model": "simple_ai"
        }

    def detect_intent(self, user_message: str, ai_response: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        message_lower = user_message.lower()

        recipe_keywords = ['—Ä–µ—Ü–µ–ø—Ç', '–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å', '–≥–æ—Ç–æ–≤–∏—Ç—å', '–∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å', '–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã']
        shopping_keywords = ['–∫—É–ø–∏—Ç—å', '–Ω—É–∂–Ω–æ', '—Å–ø–∏—Å–æ–∫', '–¥–æ–±–∞–≤—å', '–ø—Ä–æ–¥—É–∫—Ç—ã']
        advice_keywords = ['—Å–æ–≤–µ—Ç', '–ø–æ–º–æ–≥–∏—Ç–µ', '–∫–∞–∫ –ª—É—á—à–µ', '—á—Ç–æ –≤—ã–±—Ä–∞—Ç—å']

        if any(keyword in message_lower for keyword in recipe_keywords):
            return "recipe"
        elif any(keyword in message_lower for keyword in shopping_keywords):
            return "shopping"
        elif any(keyword in message_lower for keyword in advice_keywords):
            return "advice"
        else:
            return "general"

    # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    async def get_shopping_suggestions(self, user_message: str, current_list: List[str] = None) -> str:
        """–ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        result = await self.get_smart_response(user_message, current_list)
        return result["response"]


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
perplexity_client = PerplexityClient()
