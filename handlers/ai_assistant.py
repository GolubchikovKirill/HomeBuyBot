from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from database import Database
from utils.perplexity_client import perplexity_client
from keyboards.inline import get_back_to_menu, get_main_menu
from config import PERPLEXITY_API_KEY

router = Router()
logger = logging.getLogger(__name__)


class AIAssistantState(StatesGroup):
    waiting_for_question = State()


@router.callback_query(F.data == "ai_help")
async def start_ai_assistant(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫ AI –ø–æ–º–æ—â–Ω–∏–∫–∞"""

    if not PERPLEXITY_API_KEY:
        await callback.message.edit_text(
            """
ü§ñ **AI –ü–æ–º–æ—â–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**

–î–ª—è —Ä–∞–±–æ—Ç—ã AI –ø–æ–º–æ—â–Ω–∏–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–ª—é—á Perplexity API.

**–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á:**
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://www.perplexity.ai/settings/api
2. –°–æ–∑–¥–∞–π—Ç–µ API –∫–ª—é—á
3. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ —Ñ–∞–π–ª .env –∫–∞–∫ `PERPLEXITY_API_KEY`

–ü–æ–∫–∞ —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ–±—ã—á–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.
            """,
            reply_markup=get_back_to_menu(),
            parse_mode="Markdown"
        )
        await callback.answer()
        return

    await state.set_state(AIAssistantState.waiting_for_question)

    text = """
ü§ñ **AI –ü–æ–º–æ—â–Ω–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏ –ø–æ–∫—É–ø–∫–∞—Ö.

**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ *"–ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –±–æ—Ä—â–∞?"*
‚Ä¢ *"–ü–æ—Å–æ–≤–µ—Ç—É–π –∑–¥–æ—Ä–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é"*
‚Ä¢ *"–ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ –º–æ–µ–º—É —Å–ø–∏—Å–∫—É –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–æ–≤?"*
‚Ä¢ *"–ò–¥–µ–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —É–∂–∏–Ω–∞ –Ω–∞ –¥–≤–æ–∏—Ö"*
‚Ä¢ *"–ö–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Ö–æ—Ä–æ—à–æ —Å–æ—á–µ—Ç–∞—é—Ç—Å—è —Å –∫—É—Ä–∏—Ü–µ–π?"*

**–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å** –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/cancel` –¥–ª—è –≤—ã—Ö–æ–¥–∞.

üí° *–Ø –±—É–¥—É —É—á–∏—Ç—ã–≤–∞—Ç—å –≤–∞—à —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ*
    """

    await callback.message.edit_text(
        text=text,
        parse_mode="Markdown"
    )
    await callback.answer()


@router.message(AIAssistantState.waiting_for_question)
async def handle_ai_question(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫ AI"""
    user_question = message.text.strip()
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
    if user_question.lower() in ['/cancel', '–æ—Ç–º–µ–Ω–∞', 'cancel']:
        await state.clear()
        await message.answer(
            "ü§ñ AI –ø–æ–º–æ—â–Ω–∏–∫ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
            reply_markup=get_main_menu()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –≤–æ–ø—Ä–æ—Å–∞
    if len(user_question) < 3:
        await message.answer(
            "‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å.",
            parse_mode="Markdown"
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    await message.bot.send_chat_action(message.chat.id, "typing")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    list_id = await Database.get_or_create_list(user_id)
    products = await Database.get_products(list_id) if list_id else []

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è AI
    current_list = []
    if products:
        current_list = [
            f"{p['name']} ({p['quantity']})" + (" - –∫—É–ø–ª–µ–Ω–æ" if p['is_bought'] else "")
            for p in products
        ]

    logger.info(f"ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å AI: {user_question[:50]}...")

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
    ai_response = await perplexity_client.get_shopping_suggestions(
        user_question,
        current_list
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response_header = "ü§ñ **AI –ü–æ–º–æ—â–Ω–∏–∫ –æ—Ç–≤–µ—á–∞–µ—Ç:**\n\n"

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ (Telegram –ª–∏–º–∏—Ç ~4096 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(ai_response) > 3500:
        ai_response = ai_response[:3500] + "...\n\n*[–û—Ç–≤–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram]*"

    full_response = response_header + ai_response

    await message.answer(
        text=full_response,
        reply_markup=get_back_to_menu(),
        parse_mode="Markdown"
    )

    logger.info(f"‚úÖ AI –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    await state.clear()


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö AI –∫–æ–º–∞–Ω–¥
@router.message(F.text.startswith("AI:") | F.text.startswith("ai:") | F.text.startswith("–ê–ò:"))
async def quick_ai_question(message: Message):
    """–ë—ã—Å—Ç—Ä—ã–π –≤–æ–ø—Ä–æ—Å –∫ AI –±–µ–∑ –≤—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞"""

    if not PERPLEXITY_API_KEY:
        await message.answer(
            "ü§ñ AI –ø–æ–º–æ—â–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–ª—é—á Perplexity API.",
            reply_markup=get_main_menu()
        )
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞
    question = message.text[3:].strip()  # –£–±–∏—Ä–∞–µ–º "AI:" –∏ –ø—Ä–æ–±–µ–ª—ã

    if len(question) < 3:
        await message.answer(
            "‚ùì –ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ 'AI:'\n\n–ü—Ä–∏–º–µ—Ä: `AI: –ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Å–∞–ª–∞—Ç–∞ –¶–µ–∑–∞—Ä—å?`",
            reply_markup=get_main_menu(),
            parse_mode="Markdown"
        )
        return

    await message.bot.send_chat_action(message.chat.id, "typing")

    user_id = message.from_user.id
    list_id = await Database.get_or_create_list(user_id)
    products = await Database.get_products(list_id) if list_id else []

    current_list = [f"{p['name']} ({p['quantity']})" for p in products if not p['is_bought']]

    ai_response = await perplexity_client.get_shopping_suggestions(question, current_list)

    response_text = f"ü§ñ **AI:** {ai_response}"

    if len(response_text) > 4000:
        response_text = response_text[:4000] + "..."

    await message.answer(
        text=response_text,
        reply_markup=get_main_menu(),
        parse_mode="Markdown"
    )

    logger.info(f"‚úÖ –ë—ã—Å—Ç—Ä—ã–π AI –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
