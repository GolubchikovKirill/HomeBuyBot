from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

from database import Database
from utils.perplexity_client import perplexity_client
from keyboards.inline import get_main_menu, get_ai_chat_keyboard

router = Router()
logger = logging.getLogger(__name__)


class AIChatState(StatesGroup):
    chatting = State()


@router.message(F.text & ~F.text.startswith('/') & ~F.text.startswith('AI:'))
async def ai_chat_handler(message: Message, state: FSMContext):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ AI —á–∞—Ç–∞ - –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"""

    user_id = message.from_user.id
    user_message = message.text.strip()
    user_name = message.from_user.first_name

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ AI —á–∞—Ç–∞
    await state.set_state(AIChatState.chatting)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–≤–æ–µ –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏
    current_state = await state.get_state()
    if current_state != AIChatState.chatting.state:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = f"""
ü§ñ **–ü—Ä–∏–≤–µ—Ç, {user_name}!** 

–Ø –ø–µ—Ä–µ—à–µ–ª –≤ —Ä–µ–∂–∏–º AI-—á–∞—Ç–∞. –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å!

üí° **–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:**
‚Ä¢ –ö–æ–º–∞–Ω–¥—É `/menu` –∏–ª–∏ `/cancel`
‚Ä¢ –ö–Ω–æ–ø–∫—É "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –ø–æ–¥ –º–æ–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏

---

**–í–∞—à –≤–æ–ø—Ä–æ—Å:** {user_message}
        """

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        await message.answer(
            text=welcome_text,
            parse_mode="Markdown"
        )

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ AI –¥—É–º–∞–µ—Ç
    await message.bot.send_chat_action(message.chat.id, "typing")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        list_id = await Database.get_or_create_list(user_id)
        products = await Database.get_products(list_id) if list_id else []
        current_list = [f"{p['name']} ({p['quantity']})" for p in products if not p['is_bought']]

        logger.info(f"ü§ñ AI —á–∞—Ç - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {user_message[:50]}...")

        # –ü–æ–ª—É—á–∞–µ–º —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI
        ai_result = await perplexity_client.get_smart_response(user_message, current_list)

        ai_response = ai_result["response"]
        suggested_products = ai_result["products"]
        intent = ai_result["intent"]
        model = ai_result.get("model", "unknown")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = f"ü§ñ **AI –ø–æ–º–æ—â–Ω–∏–∫** _(–º–æ–¥–µ–ª—å: {model})_\n\n{ai_response}"

        # –ï—Å–ª–∏ AI –ø—Ä–µ–¥–ª–æ–∂–∏–ª –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        if suggested_products:
            response_text += f"\n\nüìã **üí° –†–µ–∫–æ–º–µ–Ω–¥—É—é –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫:**\n"
            for product in suggested_products:
                response_text += f"‚Ä¢ {product['name']} ({product['quantity']})\n"

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
        if len(response_text) > 4000:
            response_text = response_text[:4000] + "...\n\n*[–û—Ç–≤–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω]*"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
        response_text += f"\n\nüí¨ *–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ*"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            text=response_text,
            reply_markup=get_ai_chat_keyboard(suggested_products, intent),
            parse_mode="Markdown"
        )

        logger.info(f"‚úÖ AI —á–∞—Ç –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI —á–∞—Ç–∞: {type(e).__name__}: {e}")
        await message.answer(
            "ü§ñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é.",
            reply_markup=get_ai_chat_keyboard([], "error")
        )


@router.message(F.text.in_(['/menu', '/cancel', '–º–µ–Ω—é', '–æ—Ç–º–µ–Ω–∞']))
async def exit_ai_chat(message: Message, state: FSMContext):
    """–í—ã—Ö–æ–¥ –∏–∑ AI —á–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()

    await message.answer(
        "üìã **–í—ã –≤—ã—à–ª–∏ –∏–∑ AI-—á–∞—Ç–∞**\n\n–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu(),
        parse_mode="Markdown"
    )

    logger.info(f"üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã—à–µ–ª –∏–∑ AI —á–∞—Ç–∞")


@router.callback_query(F.data == "exit_ai_chat")
async def exit_ai_chat_button(callback: CallbackQuery, state: FSMContext):
    """–í—ã—Ö–æ–¥ –∏–∑ AI —á–∞—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    await state.clear()

    await callback.message.edit_text(
        "üìã **–í—ã –≤—ã—à–ª–∏ –∏–∑ AI-—á–∞—Ç–∞**\n\n–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu(),
        parse_mode="Markdown"
    )

    await callback.answer("–í—ã—à–ª–∏ –∏–∑ AI-—á–∞—Ç–∞")
    logger.info(f"üö™ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã—à–µ–ª –∏–∑ AI —á–∞—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É")


@router.callback_query(F.data == "ai_help")
async def activate_ai_chat(callback: CallbackQuery, state: FSMContext):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è AI —á–∞—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    await state.set_state(AIChatState.chatting)

    text = f"""
ü§ñ **AI-—á–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**

–ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}! –ü–∏—à–∏—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —á–∞—Ç, –∏ —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å.

**–ß—Ç–æ —è —É–º–µ—é:**
üç≥ –†–µ—Ü–µ–ø—Ç—ã –∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —Å–æ–≤–µ—Ç—ã —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
üõí –£–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
üìã –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è –∏ –º–µ–Ω—é
üí° –°–æ–≤–µ—Ç—ã –ø–æ —Ö—Ä–∞–Ω–µ–Ω–∏—é –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é
üîÑ –ü–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ –∏ –∑–∞–º–µ–Ω
üìä –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞

**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏—Ç–∞–ª—å—è–Ω—Å–∫—É—é –ø–∞—Å—Ç—É?"
‚Ä¢ "–ß—Ç–æ –∫—É–ø–∏—Ç—å –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ –∑–∞–≤—Ç—Ä–∞–∫–∞?"
‚Ä¢ "–ß–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –º–æ–ª–æ–∫–æ –≤ –≤—ã–ø–µ—á–∫–µ?"
‚Ä¢ "–ö–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å–µ–π—á–∞—Å –≤ —Å–µ–∑–æ–Ω?"

üí¨ **–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!**
    """

    await callback.message.edit_text(
        text=text,
        reply_markup=get_ai_chat_keyboard([], "welcome"),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("add_ai_products_"))
async def add_ai_suggested_products(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö AI"""
    try:
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ state
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ

        await callback.answer("‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ—Ç AI —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!", show_alert=True)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è AI –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏", show_alert=True)
