from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
import re

from database import Database
from utils.perplexity_client import perplexity_client
from keyboards.inline import get_main_menu, get_back_to_menu, get_ai_actions_keyboard

router = Router()
logger = logging.getLogger(__name__)


class AIState(StatesGroup):
    waiting_for_question = State()


# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è AI
AI_TRIGGERS = [
    '—Ä–µ—Ü–µ–ø—Ç', '–ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å', '–≥–æ—Ç–æ–≤–∏—Ç—å', '–∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å', '–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã',
    '—á—Ç–æ –∫—É–ø–∏—Ç—å', '–ø–æ—Å–æ–≤–µ—Ç—É–π', '—Ä–µ–∫–æ–º–µ–Ω–¥—É–π', '–Ω—É–∂–Ω–æ –¥–ª—è', '—Å–ø–∏—Å–æ–∫ –¥–ª—è',
    '–∫–∞–∫ —Ö—Ä–∞–Ω–∏—Ç—å', '—Å–∫–æ–ª—å–∫–æ', '–≥–¥–µ –∫—É–ø–∏—Ç—å', '—á—Ç–æ –ª—É—á—à–µ', '–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞',
    '–∑–∞–º–µ–Ω–∏—Ç—å', '–¥–∏–µ—Ç–∞', '–∑–¥–æ—Ä–æ–≤–æ–µ', '–±—ã—Å—Ç—Ä–æ', '–ø—Ä–æ—Å—Ç–æ', '–≤–∫—É—Å–Ω–æ'
]


def should_trigger_ai(message_text: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å AI"""
    text_lower = message_text.lower()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    if any(trigger in text_lower for trigger in AI_TRIGGERS):
        return True

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    question_patterns = [
        r'\b—á—Ç–æ\b.*\?',
        r'\b–∫–∞–∫\b.*\?',
        r'\b–≥–¥–µ\b.*\?',
        r'\b–∫–æ–≥–¥–∞\b.*\?',
        r'\b–∑–∞—á–µ–º\b.*\?',
        r'\b–ø–æ—á–µ–º—É\b.*\?'
    ]

    if any(re.search(pattern, text_lower) for pattern in question_patterns):
        return True

    return False


@router.callback_query(F.data == "ai_help")
async def activate_ai_mode(callback: CallbackQuery, state: FSMContext):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞ AI –ø–æ–º–æ—â–Ω–∏–∫–∞"""
    await state.set_state(AIState.waiting_for_question)

    text = """
ü§ñ **–£–º–Ω—ã–π AI –ø–æ–º–æ—â–Ω–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**

–¢–µ–ø–µ—Ä—å —è –æ—Ç–≤–µ—á—É –Ω–∞ –ª—é–±–æ–π –≤–∞—à –≤–æ–ø—Ä–æ—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ.

**–ß—Ç–æ —è —É–º–µ—é:**
üç≥ –†–µ—Ü–µ–ø—Ç—ã –∏ –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
üõí –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
üìã –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è
üí° –°–æ–≤–µ—Ç—ã –ø–æ —Ö—Ä–∞–Ω–µ–Ω–∏—é –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é
üîÑ –ü–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ –∏ –∑–∞–º–µ–Ω
üìä –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞

**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –±–æ—Ä—â —Å–æ –≤—Å–µ–º–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏?"
‚Ä¢ "–ß—Ç–æ –∫—É–ø–∏—Ç—å –¥–ª—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é?"
‚Ä¢ "–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –æ–≤–æ—â–∏?"
‚Ä¢ "–ß–µ–º –∑–∞–º–µ–Ω–∏—Ç—å —Å–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ –≤ –≤—ã–ø–µ—á–∫–µ?"

–ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/cancel` –¥–ª—è –≤—ã—Ö–æ–¥–∞.
    """

    await callback.message.edit_text(text=text, parse_mode="Markdown")
    await callback.answer()


@router.message(AIState.waiting_for_question)
async def handle_ai_question(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫ AI –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞"""
    await process_ai_message(message, is_dialog_mode=True)
    await state.clear()


@router.message(F.text & ~F.text.startswith('/'))
async def smart_message_handler(message: Message):
    """–£–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ AI"""
    text = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å AI
    if should_trigger_ai(text):
        await process_ai_message(message, is_dialog_mode=False)
    else:
        # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await handle_regular_message(message)


async def process_ai_message(message: Message, is_dialog_mode: bool = False):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ AI"""
    user_question = message.text.strip()
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
    if user_question.lower() in ['/cancel', '–æ—Ç–º–µ–Ω–∞', 'cancel']:
        if is_dialog_mode:
            await message.answer("ü§ñ AI —Ä–µ–∂–∏–º –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", reply_markup=get_main_menu())
            return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ AI –¥—É–º–∞–µ—Ç
    await message.bot.send_chat_action(message.chat.id, "typing")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
        list_id = await Database.get_or_create_list(user_id)
        products = await Database.get_products(list_id) if list_id else []
        current_list = [f"{p['name']} ({p['quantity']})" for p in products if not p['is_bought']]

        logger.info(f"ü§ñ AI –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç: {user_question[:50]}... –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –ü–æ–ª—É—á–∞–µ–º —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI
        ai_result = await perplexity_client.get_smart_response(user_question, current_list)

        ai_response = ai_result["response"]
        suggested_products = ai_result["products"]
        intent = ai_result["intent"]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = f"ü§ñ **–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫:**\n\n{ai_response}"

        # –ï—Å–ª–∏ AI –ø—Ä–µ–¥–ª–æ–∂–∏–ª –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        if suggested_products:
            response_text += f"\n\nüìã **–†–µ–∫–æ–º–µ–Ω–¥—É—é –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫:**\n"
            for product in suggested_products:
                response_text += f"‚Ä¢ {product['name']} ({product['quantity']})\n"

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã
            keyboard = get_ai_actions_keyboard(suggested_products, intent)
        else:
            keyboard = get_back_to_menu() if is_dialog_mode else get_main_menu()

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
        if len(response_text) > 4000:
            response_text = response_text[:4000] + "...\n\n*[–û—Ç–≤–µ—Ç —Å–æ–∫—Ä–∞—â–µ–Ω]*"

        await message.answer(
            text=response_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )

        logger.info(f"‚úÖ AI –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ: {len(suggested_products)}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI: {type(e).__name__}: {e}")
        await message.answer(
            "ü§ñ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu()
        )


async def handle_regular_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ AI)"""
    user_name = message.from_user.first_name
    text = message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    if len(text.split()) <= 4 and len(text) < 60:
        response_text = f"""
üí° **–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å "{text}" –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫?**

–ò–ª–∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å AI –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ "–ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è {text}?"
‚Ä¢ "–†–µ—Ü–µ–ø—Ç —Å {text}"
‚Ä¢ "–ö–∞–∫ –≤—ã–±—Ä–∞—Ç—å {text}?"
        """
    else:
        response_text = f"""
üí¨ **–ü—Ä–∏–≤–µ—Ç, {user_name}!**

–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: _{text[:100]}_

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:
        """

    await message.answer(
        text=response_text,
        reply_markup=get_main_menu(),
        parse_mode="Markdown"
    )


@router.callback_query(F.data.startswith("add_ai_products_"))
async def add_ai_suggested_products(callback: CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö AI"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
        data_part = callback.data.replace("add_ai_products_", "")
        product_indices = [int(x) for x in data_part.split("_") if x.isdigit()]

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Redis –∏–ª–∏ —Ñ–∞–π–ª)
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ

        user_id = callback.from_user.id
        list_id = await Database.get_or_create_list(user_id)

        await callback.answer("‚úÖ –ü—Ä–æ–¥—É–∫—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫!", show_alert=True)
        await callback.message.edit_text(
            "‚úÖ **–ü—Ä–æ–¥—É–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫!**\n\n–ú–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å.",
            reply_markup=get_main_menu(),
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è AI –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏", show_alert=True)
