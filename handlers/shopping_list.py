from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
import datetime

from database import Database
from keyboards.inline import get_main_menu, get_list_actions, get_back_to_menu, get_product_management_keyboard

router = Router()
logger = logging.getLogger(__name__)


class AddProductState(StatesGroup):
    waiting_for_product = State()


@router.callback_query(F.data == "view_list")
async def view_shopping_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫"""
    try:
        user_id = callback.from_user.id
        list_id = await Database.get_or_create_list(user_id)

        if not list_id:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫.",
                reply_markup=get_back_to_menu()
            )
            return

        products = await Database.get_products(list_id)
        logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        timestamp = datetime.datetime.now().strftime("%H:%M")

        if not products:
            text = f"""
üìù **–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç** _(–æ–±–Ω. {timestamp})_

–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫!

üí° *–°–æ–≤–µ—Ç: –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç" –Ω–∏–∂–µ*
            """
        else:
            text = f"üõí **–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫** _(–æ–±–Ω. {timestamp})_\n\n"

            unbought_count = 0
            bought_count = 0

            for product in products:
                if product['is_bought']:
                    status = "‚úÖ"
                    name_display = f"~~{product['name']}~~"
                    bought_count += 1
                else:
                    status = "üîò"
                    name_display = f"**{product['name']}**"
                    unbought_count += 1

                quantity_display = f" _{product['quantity']}_" if product['quantity'] != '1' else ""
                text += f"{status} {name_display}{quantity_display}\n"

            text += f"\nüìä **–ò—Ç–æ–≥–æ:** {len(products)} —Ç–æ–≤–∞—Ä–æ–≤"
            text += f"\nüîò –ö –ø–æ–∫—É–ø–∫–µ: {unbought_count}"
            text += f"\n‚úÖ –ö—É–ø–ª–µ–Ω–æ: {bought_count}"

        try:
            await callback.message.edit_text(
                text=text,
                reply_markup=get_list_actions(),
                parse_mode="Markdown"
            )
        except Exception as edit_error:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()
            await callback.message.answer(
                text=text,
                reply_markup=get_list_actions(),
                parse_mode="Markdown"
            )

        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–ø–∏—Å–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞", show_alert=True)


@router.callback_query(F.data == "manage_products")
async def manage_products(callback: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ - —É–¥–∞–ª–µ–Ω–∏–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
    try:
        user_id = callback.from_user.id
        list_id = await Database.get_or_create_list(user_id)
        products = await Database.get_products(list_id)

        if not products:
            await callback.message.edit_text(
                "üìù **–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç**\n\n–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–∏.",
                reply_markup=get_list_actions(),
                parse_mode="Markdown"
            )
            await callback.answer()
            return

        text = "üóë **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏**\n\n"
        text += "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–º/–Ω–µ –∫—É–ø–ª–µ–Ω–Ω—ã–º\n"
        text += "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ üóë –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞\n\n"
        text += f"**–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:** {len(products)}"

        await callback.message.edit_text(
            text=text,
            reply_markup=get_product_management_keyboard(products),
            parse_mode="Markdown"
        )
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "add_product")
async def start_add_product(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    try:
        await state.set_state(AddProductState.waiting_for_product)

        text = """
‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞**

–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:

**–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `–ú–æ–ª–æ–∫–æ`
‚Ä¢ `–•–ª–µ–± 2 –±—É—Ö–∞–Ω–∫–∏`  
‚Ä¢ `–Ø–±–ª–æ–∫–∏ 1 –∫–≥`
‚Ä¢ `–ü–æ–º–∏–¥–æ—Ä—ã 500–≥`

–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/cancel` –¥–ª—è –æ—Ç–º–µ–Ω—ã
        """

        await callback.message.edit_text(text=text, parse_mode="Markdown")
        await callback.answer()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.message(AddProductState.waiting_for_product)
async def add_product_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Ç–º–µ–Ω—ã
        if message.text and message.text.lower() in ['/cancel', '–æ—Ç–º–µ–Ω–∞', 'cancel']:
            await state.clear()
            await message.answer(
                "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_main_menu()
            )
            return

        product_text = message.text.strip()

        if not product_text:
            await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return

        # –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        words = product_text.split()
        product_name = product_text
        quantity = '1'

        if len(words) > 1:
            last_word = words[-1].lower()
            units = ['–∫–≥', '–≥', '–≥—Ä', '–ª', '–º–ª', '—à—Ç', '—à—Ç—É–∫', '—É–ø–∞–∫', '–ø–∞—á–∫–∞', '–±–∞–Ω–∫–∞', '–±—É—Ç—ã–ª–∫–∞']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            if any(unit in last_word for unit in units):
                if len(words) >= 2 and words[-2].replace(',', '.').replace('.', '').isdigit():
                    quantity = f"{words[-2]} {words[-1]}"
                    product_name = ' '.join(words[:-2])
                else:
                    quantity = words[-1]
                    product_name = ' '.join(words[:-1])
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ –Ω–∞ —á–∏—Å–ª–æ
            elif last_word.replace(',', '.').replace('.', '').isdigit():
                quantity = words[-1]
                product_name = ' '.join(words[:-1])

        if not product_name.strip():
            product_name = product_text
            quantity = '1'

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        user_id = message.from_user.id
        list_id = await Database.get_or_create_list(user_id)

        if list_id:
            await Database.add_product(list_id, product_name, quantity)

            success_text = f"‚úÖ **–ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω!**\n\nüì¶ **{product_name}**"
            if quantity != '1':
                success_text += f" _{quantity}_"

            logger.info(f"‚ûï –ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {product_name} ({quantity}) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

            await message.answer(
                text=success_text,
                reply_markup=get_main_menu(),
                parse_mode="Markdown"
            )
        else:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_main_menu()
            )

        await state.clear()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")
        await state.clear()
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞.",
            reply_markup=get_main_menu()
        )


@router.callback_query(F.data.startswith("toggle_"))
async def toggle_product_status(callback: CallbackQuery):
    """–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥—É–∫—Ç–∞ (–∫—É–ø–ª–µ–Ω/–Ω–µ –∫—É–ø–ª–µ–Ω)"""
    try:
        product_id = int(callback.data.split("_")[1])
        success = await Database.toggle_product_bought(product_id)

        if success:
            await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω!", show_alert=False)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            await manage_products(callback)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)

    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ toggle: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("delete_"))
async def delete_product_handler(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞"""
    try:
        product_id = int(callback.data.split("_")[1])
        success = await Database.delete_product(product_id)

        if success:
            await callback.answer("üóë –ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª–µ–Ω!", show_alert=False)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            await manage_products(callback)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", show_alert=True)

    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ delete: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "clear_bought")
async def clear_bought_products(callback: CallbackQuery):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫—É–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"""
    try:
        user_id = callback.from_user.id
        list_id = await Database.get_or_create_list(user_id)

        if list_id:
            deleted_count = await Database.clear_bought_products(list_id)

            if deleted_count > 0:
                await callback.answer(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤", show_alert=True)
                logger.info(f"üßπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—á–∏—Å—Ç–∏–ª {deleted_count} —Ç–æ–≤–∞—Ä–æ–≤")

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è
                if "manage_products" in str(callback.message.reply_markup):
                    await manage_products(callback)
                else:
                    await view_shopping_list(callback)
            else:
                await callback.answer("‚ÑπÔ∏è –ù–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–ø–∏—Å–∫–∞", show_alert=True)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ", show_alert=True)
