#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–µ–º–µ–π–Ω–æ–≥–æ –±–æ—Ç–∞
"""
import asyncio
import os
import sqlite3
from pathlib import Path
from config import DATABASE_URL


def create_database_sync():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–¥–ª—è IDE)"""

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –±–∞–∑—É –µ—Å–ª–∏ –µ—Å—Ç—å
    if os.path.exists(DATABASE_URL):
        print(f"üóë –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É: {DATABASE_URL}")
        os.remove(DATABASE_URL)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É
    print(f"üìä –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {DATABASE_URL}")

    conn = sqlite3.connect(DATABASE_URL)
    cursor = conn.cursor()

    # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
    cursor.execute('PRAGMA foreign_keys = ON')

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
                   CREATE TABLE users
                   (
                       user_id    INTEGER PRIMARY KEY,
                       username   TEXT,
                       first_name TEXT,
                       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                   )
                   ''')
    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'users' —Å–æ–∑–¥–∞–Ω–∞")

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–ø–∏—Å–∫–æ–≤ –ø–æ–∫—É–ø–æ–∫
    cursor.execute('''
                   CREATE TABLE shopping_lists
                   (
                       id         INTEGER PRIMARY KEY AUTOINCREMENT,
                       user_id    INTEGER NOT NULL,
                       name       TEXT      DEFAULT '–û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫',
                       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                       FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE
                   )
                   ''')
    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'shopping_lists' —Å–æ–∑–¥–∞–Ω–∞")

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    cursor.execute('''
                   CREATE TABLE products
                   (
                       id        INTEGER PRIMARY KEY AUTOINCREMENT,
                       list_id   INTEGER NOT NULL,
                       name      TEXT    NOT NULL,
                       quantity  TEXT      DEFAULT '1',
                       is_bought INTEGER   DEFAULT 0,
                       added_at  TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                       FOREIGN KEY (list_id) REFERENCES shopping_lists (id) ON DELETE CASCADE
                   )
                   ''')
    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'products' —Å–æ–∑–¥–∞–Ω–∞")

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    cursor.execute('CREATE INDEX idx_products_list_id ON products (list_id)')
    cursor.execute('CREATE INDEX idx_products_is_bought ON products (is_bought)')
    cursor.execute('CREATE INDEX idx_shopping_lists_user_id ON shopping_lists (user_id)')
    print("‚úÖ –ò–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("\nüìã –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")

    # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cursor.execute('''
                   INSERT INTO users (user_id, username, first_name)
                   VALUES (123456789, 'test_user', '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                   ''')

    # –¢–µ—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
    cursor.execute('''
                   INSERT INTO shopping_lists (user_id, name)
                   VALUES (123456789, '–û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫')
                   ''')

    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    test_products = [
        (1, '–ú–æ–ª–æ–∫–æ', '1 –ª–∏—Ç—Ä', 0),
        (1, '–•–ª–µ–±', '1 –±—É—Ö–∞–Ω–∫–∞', 0),
        (1, '–Ø–π—Ü–∞', '10 —à—Ç—É–∫', 1),
        (1, '–ü–æ–º–∏–¥–æ—Ä—ã', '500 –≥', 0),
        (1, '–°—ã—Ä', '200 –≥', 1)
    ]

    cursor.executemany('''
                       INSERT INTO products (list_id, name, quantity, is_bought)
                       VALUES (?, ?, ?, ?)
                       ''', test_products)

    print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")

    conn.commit()
    conn.close()

    print(f"\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{DATABASE_URL}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
    print_database_info()


def print_database_info():
    """–í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –±–∞–∑–µ"""
    conn = sqlite3.connect(DATABASE_URL)
    cursor = conn.cursor()

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
    tables = cursor.fetchall()

    print(f"\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:")
    print(f"üìÅ –§–∞–π–ª: {os.path.abspath(DATABASE_URL)}")
    print(f"üìã –¢–∞–±–ª–∏—Ü—ã: {[table[0] for table in tables]}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º
    cursor.execute("SELECT COUNT(*) FROM users")
    users_count = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM shopping_lists")
    lists_count = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM products")
    products_count = cursor.fetchone()[0]

    cursor.execute("SELECT COUNT(*) FROM products WHERE is_bought = 1")
    bought_count = cursor.fetchone()[0]

    print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}")
    print(f"üìù –°–ø–∏—Å–∫–æ–≤: {lists_count}")
    print(f"üõí –ü—Ä–æ–¥—É–∫—Ç–æ–≤: {products_count}")
    print(f"‚úÖ –ö—É–ø–ª–µ–Ω–Ω—ã—Ö: {bought_count}")

    conn.close()


async def test_async_database():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    from database import Database, init_db

    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
    await init_db()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
    test_user_id = 987654321
    await Database.add_user(test_user_id, "async_user", "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π")

    list_id = await Database.get_or_create_list(test_user_id, "–¢–µ—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫")
    await Database.add_product(list_id, "Async –ø—Ä–æ–¥—É–∫—Ç", "1 —à—Ç")

    products = await Database.get_products(list_id)
    print(f"‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–¥—É–∫—Ç–æ–≤: {len(products)}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å–µ–º–µ–π–Ω–æ–≥–æ –±–æ—Ç–∞\n")

    # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    create_database_sync()

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    asyncio.run(test_async_database())

    print("\n‚ú® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞.")


if __name__ == "__main__":
    main()