from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Dict


def get_main_menu() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ú–æ–π —Å–ø–∏—Å–æ–∫", callback_data="view_list")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="add_product")],
        [InlineKeyboardButton(text="ü§ñ AI –ø–æ–º–æ—â–Ω–∏–∫", callback_data="ai_help")],
        [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="clear_options")]
    ])


def get_list_actions() -> InlineKeyboardMarkup:
    """–î–µ–π—Å—Ç–≤–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="add_product")],
        [InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="mark_products")],
        [InlineKeyboardButton(text="üóë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="manage_products")],
        [InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="clear_options")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])


def get_product_list_keyboard(products) -> InlineKeyboardMarkup:
    """–ù–û–í–û–ï: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ"""
    keyboard = []

    for product in products:
        status_emoji = "‚úÖ" if product['is_bought'] else "üîò"
        button_text = f"{status_emoji} {product['name']}"
        if product['quantity'] != '1':
            button_text += f" ({product['quantity']})"

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        keyboard.append([
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"toggle_{product['id']}"
            )
        ])

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.append([
        InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="mark_products"),
        InlineKeyboardButton(text="üóë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="manage_products")
    ])
    keyboard.append([
        InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="clear_options")
    ])
    keyboard.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_mark_products_keyboard(products) -> InlineKeyboardMarkup:
    """–ù–û–í–û–ï: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    keyboard = []

    for product in products:
        if product['is_bought']:
            button_text = f"‚úÖ {product['name']}"
            action_text = "–°–Ω—è—Ç—å –æ—Ç–º–µ—Ç–∫—É"
        else:
            button_text = f"üîò {product['name']}"
            action_text = "–û—Ç–º–µ—Ç–∏—Ç—å"

        if product['quantity'] != '1':
            button_text += f" ({product['quantity']})"

        keyboard.append([
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"toggle_{product['id']}"
            )
        ])

    # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    keyboard.append([
        InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ", callback_data="mark_all"),
        InlineKeyboardButton(text="üîò –°–Ω—è—Ç—å –≤—Å–µ", callback_data="unmark_all")
    ])
    keyboard.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="view_list")
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_clear_options() -> InlineKeyboardMarkup:
    """–û–ø—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏ —Å–ø–∏—Å–∫–∞"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üßπ –¢–æ–ª—å–∫–æ –∫—É–ø–ª–µ–Ω–Ω—ã–µ", callback_data="clear_bought")],
        [InlineKeyboardButton(text="üóë –í–µ—Å—å —Å–ø–∏—Å–æ–∫", callback_data="clear_all")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="view_list")]
    ])


def get_back_to_menu() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])


def get_product_management_keyboard(products) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"""
    keyboard = []

    for product in products:
        status_emoji = "‚úÖ" if product['is_bought'] else "üîò"
        button_text = f"{status_emoji} {product['name'][:20]}"

        # –ö–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥: —Å—Ç–∞—Ç—É—Å –∏ —É–¥–∞–ª–µ–Ω–∏–µ
        row = [
            InlineKeyboardButton(
                text=button_text,
                callback_data=f"toggle_{product['id']}"
            ),
            InlineKeyboardButton(
                text="üóë",
                callback_data=f"delete_{product['id']}"
            )
        ]
        keyboard.append(row)

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.append([
        InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="clear_options")
    ])
    keyboard.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="view_list")
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_ai_actions_keyboard(suggested_products: List[Dict], intent: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ AI"""
    keyboard = []

    if suggested_products:
        products_data = "_".join([str(i) for i in range(len(suggested_products))])
        keyboard.append([
            InlineKeyboardButton(
                text=f"‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã ({len(suggested_products)})",
                callback_data=f"add_ai_products_{products_data}"
            )
        ])

    if intent == "recipe":
        keyboard.append([
            InlineKeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="view_list"),
            InlineKeyboardButton(text="ü§ñ –ï—â–µ —Ä–µ—Ü–µ–ø—Ç", callback_data="ai_help")
        ])
    elif intent == "shopping":
        keyboard.append([
            InlineKeyboardButton(text="üìù –ú–æ–π —Å–ø–∏—Å–æ–∫", callback_data="view_list"),
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="add_product")
        ])
    else:
        keyboard.append([
            InlineKeyboardButton(text="üìù –ú–æ–π —Å–ø–∏—Å–æ–∫", callback_data="view_list"),
            InlineKeyboardButton(text="ü§ñ –ï—â–µ –≤–æ–ø—Ä–æ—Å", callback_data="ai_help")
        ])

    keyboard.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_ai_chat_keyboard(suggested_products: List[Dict] = None, intent: str = "general") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è AI-—á–∞—Ç–∞"""
    keyboard = []

    # –ï—Å–ª–∏ AI –ø—Ä–µ–¥–ª–æ–∂–∏–ª –ø—Ä–æ–¥—É–∫—Ç—ã
    if suggested_products and len(suggested_products) > 0:
        products_data = "_".join([str(i) for i in range(len(suggested_products))])
        keyboard.append([
            InlineKeyboardButton(
                text=f"‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã ({len(suggested_products)})",
                callback_data=f"add_ai_products_{products_data}"
            )
        ])

    # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è
    if intent == "recipe":
        keyboard.append([
            InlineKeyboardButton(text="üç≥ –ï—â–µ —Ä–µ—Ü–µ–ø—Ç", callback_data="ai_help"),
            InlineKeyboardButton(text="üìù –ú–æ–π —Å–ø–∏—Å–æ–∫", callback_data="view_list")
        ])
    elif intent == "shopping":
        keyboard.append([
            InlineKeyboardButton(text="üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="view_list"),
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="add_product")
        ])
    elif intent == "welcome":
        keyboard.append([
            InlineKeyboardButton(text="üìù –ú–æ–π —Å–ø–∏—Å–æ–∫", callback_data="view_list"),
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="add_product")
        ])
    else:
        keyboard.append([
            InlineKeyboardButton(text="üìù –ú–æ–π —Å–ø–∏—Å–æ–∫", callback_data="view_list"),
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", callback_data="add_product")
        ])

    # –ö–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏ —Å–ø—Ä–∞–≤–∫–∏
    keyboard.append([
        InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="exit_ai_chat"),
        InlineKeyboardButton(text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="ai_help_info")
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)
